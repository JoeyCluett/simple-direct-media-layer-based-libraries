#ifndef RENDER_API_v1
#define RENDER_API_v1

#include <iostream>
#define DEGRAD degrees/57.295779

using namespace std;

//struct containing all data needed for defining single points in 3D space
struct Point {
    float x;
    float y;
    float z;
};

//make cube struct

//accepts an arbitrarily large array of points. performs axis rotation on each point in array
void axis_rotate(char axis, float degrees, Point a[], int pts, int output = 0){
    float x, y, z;
    for(int i = 0; i < pts; i++){
        x = a[i].x; y = a[i].y; z = a[i].z;
        switch(axis){
            case 88:
            case 120: //x-rotation
                if(output) cout << "x rotation" << endl;
                a[i].y = y*cosf(DEGRAD) - z*sinf(DEGRAD);
                a[i].z = y*sinf(DEGRAD) + z*cosf(DEGRAD);
                break;
            case 89:
            case 121: //y-rotation
                if(output) cout << "y rotation" << endl;
                a[i].x = x*cosf(DEGRAD) + z*sinf(DEGRAD);
                a[i].z = -x*sinf(DEGRAD) + z*cosf(DEGRAD);
                break;
            case 90:
            case 122: //z-rotation
                if(output) cout << "z rotation" << endl;
                a[i].x = x*cosf(DEGRAD) - y*sinf(DEGRAD);
                a[i].y = x*sinf(DEGRAD) + y*cosf(DEGRAD);
                break;
            default:
                cout << "Undefined operation\n" << endl; break;
        }
    }
}

//easily fill out Point
void fillPoint(Point* pt, int x, int y, int z){
    pt->x = x;
    pt->y = y;
    pt->z = z;
}

//applies array of points to screen. Does not flip screen, that is left to programmer.
//b[][2] contains all pairs of points which are connected by lines in the virtual space.
void plotLines(Point a[], short b[][2], short conns, int sizeA, Uint32 color){
    ;
}

#endif //RENDER_API_v1
